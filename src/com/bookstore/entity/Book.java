package com.bookstore.entity;

import java.util.Base64;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

/**
 * Book generated by hbm2java
 */
@Entity
@Table(name = "book", catalog = "bookstoredb", uniqueConstraints = @UniqueConstraint(columnNames = "title"))
@NamedQueries({ @NamedQuery(name = "Book.findAll", query = "SELECT b FROM Book b"),
		@NamedQuery(name = "Book.findByTitle", query = "SELECT b FROM Book b Where b.title = :title"),
		@NamedQuery(name = "Book.countAll", query = "SELECT COUNT(*) FROM Book b"),
		@NamedQuery(name = "Book.countbycategory", query = "SELECT COUNT(b) FROM Book b "
				+ "WhERE b.category.categoryId = :cateId"),
		@NamedQuery(name = "Book.findbyCategory", query = "SELECT b FROM Book b JOIN Category c ON b.category.categoryId = c.categoryId AND c.categoryId = :catId"),
		@NamedQuery(name = "Book.listnewbook", query = "SELECT b FROM Book b ORDER BY b.publishDate DESC"),
		@NamedQuery(name = "Book.search", query = "SELECT b FROM Book b WhERE b.title LIKE '%' || :keyword || '%'"
				+ "OR b.author LIKE '%' || :keyword || '%'" + "OR b.depcription LIKE '%' || :keyword || '%'"), })
public class Book implements java.io.Serializable {

	private Integer bookId;
	private Category category;
	private String title;
	private String author;
	private String depcription;
	private String isbn;
	private byte[] image;
	private String base64Image;
	private float price;
	private Date publishDate;
	private Date lastUpdateTime;
	private Set<ReviewTable> reviewTables = new HashSet<ReviewTable>(0);
	private Set<OrderDetail> orderDetails = new HashSet<OrderDetail>(0);

	public Book() {
	}

	public Book(Integer bookId) {
		super();
		this.bookId = bookId;
	}

	public Book(Category category, String title, String author, String depcription, String isbn, float price,
			Date publishDate, Date lastUpdateTime) {
		this.category = category;
		this.title = title;
		this.author = author;
		this.depcription = depcription;
		this.isbn = isbn;
		this.price = price;
		this.publishDate = publishDate;
		this.lastUpdateTime = lastUpdateTime;
	}

	public Book(Category category, String title, String author, String depcription, String isbn, byte[] image,
			float price, Date publishDate, Date lastUpdateTime, Set<ReviewTable> reviewTables,
			Set<OrderDetail> orderDetails) {
		this.category = category;
		this.title = title;
		this.author = author;
		this.depcription = depcription;
		this.isbn = isbn;
		this.image = image;
		this.price = price;
		this.publishDate = publishDate;
		this.lastUpdateTime = lastUpdateTime;
		this.reviewTables = reviewTables;
		this.orderDetails = orderDetails;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "book_id", unique = true, nullable = false)
	public Integer getBookId() {
		return this.bookId;
	}

	public void setBookId(Integer bookId) {
		this.bookId = bookId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "category_id", nullable = false)
	public Category getCategory() {
		return this.category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}

	@Column(name = "title", unique = true, nullable = false, length = 128)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "author", nullable = false, length = 64)
	public String getAuthor() {
		return this.author;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	@Column(name = "depcription", nullable = false, length = 16777215)
	public String getDepcription() {
		return this.depcription;
	}

	public void setDepcription(String depcription) {
		this.depcription = depcription;
	}

	@Column(name = "isbn", nullable = false, length = 15)
	public String getIsbn() {
		return this.isbn;
	}

	public void setIsbn(String isbn) {
		this.isbn = isbn;
	}

	@Column(name = "image")
	public byte[] getImage() {
		return this.image;
	}

	public void setImage(byte[] image) {
		this.image = image;
	}

	@Column(name = "price", nullable = false, precision = 12, scale = 0)
	public float getPrice() {
		return this.price;
	}

	public void setPrice(float price) {
		this.price = price;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "publish_date", nullable = false, length = 10)
	public Date getPublishDate() {
		return this.publishDate;
	}

	public void setPublishDate(Date publishDate) {
		this.publishDate = publishDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_update_time", nullable = false, length = 19)
	public Date getLastUpdateTime() {
		return this.lastUpdateTime;
	}

	public void setLastUpdateTime(Date lastUpdateTime) {
		this.lastUpdateTime = lastUpdateTime;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "book")
	public Set<ReviewTable> getReviewTables() {
		TreeSet<ReviewTable> sortedreviews = new TreeSet<>(new Comparator<ReviewTable>() {
			@Override
			public int compare(ReviewTable o1, ReviewTable o2) {
				return o2.getReviewTime().compareTo(o1.getReviewTime());
			}
		});
		sortedreviews.addAll(reviewTables);
		return sortedreviews;
	}

	public void setReviewTables(Set<ReviewTable> reviewTables) {
		this.reviewTables = reviewTables;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "book")
	public Set<OrderDetail> getOrderDetails() {
		return this.orderDetails;
	}

	public void setOrderDetails(Set<OrderDetail> orderDetails) {
		this.orderDetails = orderDetails;
	}

	@Transient
	public String getBase64Image() {
		this.base64Image = Base64.getEncoder().encodeToString(this.image);
		return this.base64Image;
	}

	@Transient
	public void setBase64Image(String base64Image) {
		this.base64Image = base64Image;
	}

	@Transient
	public float getAverageRating() {
		float averagerating = 0.0f;
		float sum = 0.0f;

		if (reviewTables.isEmpty()) {
			return 0.0f;
		}

		for (ReviewTable r : reviewTables) {
			sum += r.getRating();
		}

		averagerating = sum / reviewTables.size();

		return averagerating;
	}

	@Transient
	public String getRatingString(float averagerating) {
		String result = "";
		int numberOfstarsOn = (int) averagerating;

		for (int i = 1; i <= numberOfstarsOn; i++) {
			result += "on,";
		}

		int next = numberOfstarsOn + 1;

		if (averagerating > numberOfstarsOn) {
			result += "half,";
			next++;
		}

		for (int j = next; j <= 5; j++) {
			result += "off,";
		}

		return result.substring(0, result.length() - 1);
	}

	@Transient
	public String getRatingStars() {
		float averagerating = getAverageRating();

		return getRatingString(averagerating);
	}

	@Override
	public int hashCode() {
		return Objects.hash(bookId);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Book other = (Book) obj;
		return Objects.equals(bookId, other.bookId);
	}

}
